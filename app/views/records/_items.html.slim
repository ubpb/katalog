- has_cso  = items.any? { |_item| _item.must_be_ordered_from_closed_stack? }
- has_note = items.any? { |_item| _item.note }

#items
  - unless current_user.present?
    .tools
      - if current_action == "records#show" && @record && flash[:search_request]
        - return_to_path = record_path(@record.id, search_request: Skala::SearchRequest.new(flash[:search_request]))

      = link_to new_session_path(return_to: return_to_path || request.fullpath), class: "btn btn-sm btn-primary" do
        => fa_icon("user")
        = t(".login_button")
  - else
    - if can_create_hold_request
      .tools
        == t(".no_of_hold_requests", count: number_of_hold_requests)
        =< link_to "Jetzt vormerken", user_hold_requests_path(ils_record_id: record.id, return_to: request.fullpath), method: :post, class: "btn btn-primary btn-sm"

  - if hold_request.present?
    - if hold_request.end_hold_date.present? && hold_request.end_hold_date < Time.zone.today
      .alert.alert-danger
        = "Das für Sie bereitgestellte Exemplar wurde nicht abgeholt oder Sie haben die bereitgestellte Vormerkung gelöscht. Eine erneute Vormerkung ist erst möglich wenn der Vorgang abgeschlossen wurde."
    - else
      .alert.alert-success
        - if hold_request.place_in_queue > 0
          = "Ein Exemplar wurde für Sie vorgemerkt. Sie sind an Position #{hold_request.place_in_queue} in der Warteschlange."
        - elsif hold_request.place_in_queue == 0 && hold_request.status == :in_process
          = "Ein Exemplar wurde für Sie vorgemerkt."
        - elsif hold_request.place_in_queue == 0 && hold_request.status == :on_hold
          = "Ein Exemplar wurde für Sie bereitgestellt und liegt bis zum #{l(hold_request.end_hold_date)} zur Abholung bereit."
          =< link_to "Details", user_hold_requests_path

  .row
    .col-sm-12
      .table-responsive
        table.table.table-striped
          thead
            tr
              - if show_availability?(@document.id, record)
                th
              th = t(".signature")
              th = t(".item_status")
              th = t(".location")
              th = t(".loan_status")
              th = t(".due_date")
              - if has_note
                th = t(".note")
              - if has_cso
                th = t(".cso")

          tbody
            - items.each do |item|
              tr
                - if show_availability?(@document.id, record)
                  - if item.availability == :available
                    td.state.available
                  - elsif item.availability == :restricted_available
                    td.state.restricted-available
                  - elsif item.availability == :not_available
                    td.state.not-available
                  - else # maybe there are no availability informations at all
                    td.state.unknown

                td
                  / FIXME: Build an OpenStruct to fake fields API with so we can reuse the signature helper
                  = value_or_default(signature(item.signature, link: true))
                td
                  = value_or_default(item.item_status)
                td
                  = value_or_default(item_location(item))
                td
                  = t(".status.#{item.status}", expected_date: item.expected_date ? l(item.expected_date) : nil, default: item.status)
                td
                  = item.due_date ? l(item.due_date) : "–"

                - if has_note
                  td == ensure_array(item.note).join("<br/>")

                - if has_cso
                  td
                    - if item.must_be_ordered_from_closed_stack?
                      - if current_user.present?
                        = link_to t(".cso"), new_closed_stack_order_path(m1: item.signature), class: 'btn btn-primary btn-xs'
                      - else
                        = t(".login_cso")

