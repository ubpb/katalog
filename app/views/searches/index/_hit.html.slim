- notes ||= nil
- scope ||= nil
- search_request ||= nil
- watch_lists ||= nil

/ HACK: data-record-id is needed in WatchLists#show to determine if an entry has to be deleted
.hit.record(data-record-id=hit.try(:record).try(:id))
  .row
    .col-sm-11
      .image
        = ractive_component "app.components.Image",
          placeholder: icon(hit.record, size: "small"),
          src: amazon_image_url(hit.record)

      .metadata
        / Title
        .title = title(hit.record, scope: scope, search_request: search_request)

        / Superorder
        - if (is_part_of = is_part_of(hit.record, scope: scope)).present?
         .is-part-of = is_part_of.html_safe

        / Additional record info
        - if (info = additional_record_info(hit.record)).present?
          .additional-info = info

        - if journal_holdings = journal_holdings(hit.record)
          .journal-holdings = "Bestand UB: #{journal_holdings}"

        / Status
        .status
          - if show_availability?(hit.record, scope)
            => ractive_component "app.components.AvailabilityIndicator", record: hit.record, scope: scope

          - if (signature = signature(hit.record, link: true)).present?
            span.signature = "Signatur: #{signature}".html_safe

        / Link to online resource
        - if (links = resource_links(hit.record, default_link_only: true))
          .link_to_resource
            = links
            = vpn_info

        = ractive_component "app.components.WatchLists",
          record: hit.record,
          watch_lists: client_memory_store("watch_lists", watch_lists, include: :watch_list_entries)

        = ractive_component "app.components.Note",
          notes: client_memory_store("notes", notes),
          record: hit.record

    .col-sm-1
      = ractive_component "app.components.RecordActions",
        notes: client_memory_store("notes", notes),
        record: hit.record,
        scope: scope,
        user: client_memory_store("user", current_user),
        watch_lists: client_memory_store("watch_lists", watch_lists, include: :watch_list_entries)
