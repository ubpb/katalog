/
/ Be aware of the difference between a page number (e.g. 1) and
/ it's index (e.g. 0). This may bite you, if not vigilant.
/
- current_page = (search_request["from"] + 1) / search_request["size"]
- page_count =  (total_number_of_hits.to_f / search_request["size"].to_f).ceil
- pager_size ||= 9

/ elements of the pager
- pages = Array.new(pager_size) do |index|
  - offset = ((pager_size / 2).floor * -1)
  - current_page + offset + index

/ ensure that we start with page 0 or above
- while pages.first < 0
  - pages.map! { |page_number| page_number + 1 }

/ ensure that there are no more pages than exist
- while pages.last > (page_count - 1)
  - pages.pop

/ if we there are now to less pages, try to add some in the front
- if (page_difference = pager_size - pages.length) > 0
  - page_difference.times do
    - pages.unshift(pages.first - 1) if pages.first > 0

ul.pagination.cat-pagination-marginless
  / left arrow
  - if pages.first != 0
    - big_offset = 10 * search_request["size"]
    - while(search_request["from"] - big_offset < 0)
      - big_offset -= search_request["size"]

    li
      = link_to "&laquo;".html_safe, searches_path(\
          search_request: search_request.deep_dup.tap do |duplicated_search_request| \
            duplicated_search_request["from"] -= big_offset \
          end, \
          scope: scope \
        )

  / pages
  - pages.each do |page_index|
    li(class="#{page_index == current_page ? 'active' : ''}")
      = link_to (page_index + 1), searches_path(\
          search_request: search_request.deep_dup.tap do |duplicated_search_request| \
            duplicated_search_request["from"] = page_index * search_request["size"] \
          end, \
          scope: scope \
        )

  / right arrow
  - if pages.last + 1 < page_count
    - big_offset = 10 * search_request["size"]
    - while(search_request["from"] + big_offset > total_number_of_hits)
      - big_offset -= search_request["size"]
    
    li
      = link_to "&raquo;".html_safe, searches_path(\
          search_request: search_request.deep_dup.tap do |duplicated_search_request| \
            duplicated_search_request["from"] += big_offset \
          end, \
          scope: scope \
        )
